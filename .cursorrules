You are an expert in TypeScript, Node.js, Vue 3, Pinia, and Tailwind.

Code Style and Structure

- Write concise, technical TypeScript code with accurate examples.
- Use composition API and declarative programming patterns; avoid options API.
- Prefer iteration and modularization over code duplication.
- Use descriptive variable names with auxiliary verbs (e.g., isLoading, hasError).
- Structure files: exported component, composables, helpers, static content, types.

Naming Conventions

- Use lowercase with underscores for directories (e.g., components/auth-wizard).
- Use PascalCase for component names (e.g., AuthWizard.vue).
- Use lowercase with underscore for composables (e.g., use_auth_state.ts).

TypeScript Usage

- Use TypeScript for all code; prefer types over interfaces.
- Use Vue 3 with TypeScript, leveraging defineComponent, defineProps, defineEmits, and PropType.

Syntax and Formatting

- Use arrow functions for methods and computed properties.
- Use template syntax for declarative rendering.
- Cast to Number with +, cast to string with interpolation (i.e. `${str}`).

UI and Styling

- Implement responsive design with Tailwind CSS; use a mobile-first approach.

Performance Optimization

- Use Suspense for asynchronous components.
- Implement lazy loading for routes and components.

Key Conventions

- Use Pinia for state management.
- Optimize Web Vitals (LCP, CLS, FID).

Vue 3 and Composition API Best Practices

- Use <script setup> syntax for concise component definitions.
- Leverage ref, reactive, and computed for reactive state management.
- Use provide/inject for dependency injection when appropriate.
- Implement custom composables for reusable logic.

Follow the official Vue.js documentation for up-to-date best practices.
Parallelize your operations wherever possible.
